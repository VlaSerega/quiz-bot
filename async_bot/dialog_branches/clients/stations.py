import datetime

from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.types import ReplyKeyboardRemove
from aiogram.utils.callback_data import CallbackData
from sqlalchemy.ext.asyncio import AsyncSession

from async_bot.dialog_branches.clients.question import QuestionType, Question, Action
from async_bot.dialog_branches.clients.states import FSMQuestion
from async_bot.dialog_branches.utils import process_question, callback_data_answer, Button, \
    create_keyboard_inline, process_remain_question, create_keyboard_reply
from database.models import User, Team

aq = [Question('–¢—ã —É–∂–µ –≤ –º—É–∑–µ–µ –ì–µ—Ä–º–∞–Ω–∞ –¢–∏—Ç–æ–≤–∞ –≤ —Å–µ–ª–µ –ü–æ–ª–∫–æ–≤–Ω–∏–∫–æ–≤–æ?',
               QuestionType.one, answers=['–î–∞', '–ù–µ—Ç'],
               cor_answer='–î–∞',
               incorrect_reply='–°–∫–æ—Ä–æ –ø—Ä–∏–±—É–¥–µ—à—å —Ç—É–¥–∞. –ù–µ –∑–∞–±—É–¥—å –ø—Ä–æ—Ç–µ—Ä–µ—Ç—å –∫–∞–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –æ–Ω–∞ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è, —á—Ç–æ–±—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ.'),
      Question(
          '–û—Ç–ª–∏—á–Ω–æ! –ì–µ—Ä–º–∞–Ω –¢–∏—Ç–æ–≤ - –≤—Ç–æ—Ä–æ–π –ª–µ—Ç—á–∏–∫-–∫–æ—Å–º–æ–Ω–∞–≤—Ç –≤ –º–∏—Ä–µ –∏ –ø–µ—Ä–≤—ã–π —á–µ–ª–æ–≤–µ–∫, —Å–æ–≤–µ—Ä—à–∏–≤—à–∏–π –¥–ª–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ—Å–º–µ—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–ª–µ—Ç. –ê –∫–∞–∫ –Ω–∞ —Å—á—ë—Ç selfie c –ì–µ—Ä–º–∞–Ω–æ–º –°—Ç–µ–ø–∞–Ω–æ–≤–∏—á–µ–º? C–¥–µ–ª–∞–π —Ñ–æ—Ç–æ —Å –ª—é–±—ã–º –ø–æ—Ä—Ç—Ä–µ—Ç–æ–º –¢–∏—Ç–æ–≤–∞ –≤ –º—É–∑–µ–µ –∏ –ø—Ä–∏—à–ª–∏ –º–Ω–µ. –°–æ–±–∏—Ä–∞—é –∫–æ–ª–ª–µ–∫—Ü–∏—é. üì∏',
          QuestionType.photo),
      Question('–ö–ª–∞—Å—Å! –í—ã –æ—Ç–ª–∏—á–Ω–æ —Å–º–æ—Ç—Ä–∏—Ç–µ—Å—å –≤–º–µ—Å—Ç–µ! –¢–µ–±–µ –Ω—Ä–∞–≤–∏—Ç—Å—è —Ñ–æ—Ç–æ?',
               QuestionType.one, answers=['–î–∞', '–ù–µ—Ç'], incor_action=Action.next, cor_answer='–î–∞',
               incorrect_reply='–ù—É –∏ –ª–∞–¥–Ω–æ! –ù–∞—àe –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –≤—Å–µ-—Ä–∞–≤–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è!'),
      Question('–û–≥–æ! –î–∞ –≤—ã –∫–∞–∂–µ—Ç—Å—è –ø–æ—Ö–æ–∂–∏, —Å–ª—É—á–∞–π–Ω–æ –Ω–µ —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏?',
               QuestionType.one, answers=['–î–∞', '–ù–µ—Ç'], incor_action=Action.next, cor_answer='–î–∞',
               incorrect_reply='–ù—É –∏ –ª–∞–¥–Ω–æ! –ù–∞—àe –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –≤—Å–µ-—Ä–∞–≤–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è!'),
      Question('–ï—â—ë –æ–¥–∏–Ω —Ü–µ–Ω–Ω—ã–π –∫–∞–¥—Ä –¥–ª—è –º–æ–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏! –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å —Ç–µ–±—è –Ω–∞ –≤—ã—Å—Ç–∞–≤–∫—É?',
               QuestionType.one, answers=['–î–∞', '–ù–µ—Ç'], incor_action=Action.next, cor_answer='–î–∞',
               incorrect_reply='–ù—É –∏ –ª–∞–¥–Ω–æ! –ù–∞—àe –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –≤—Å–µ-—Ä–∞–≤–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è!'),
      Question('–ö–ª–∞—Å—Å–Ω–æ–µ —Ñ–æ—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å! –¢–µ–±–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –≤ –º—É–∑–µ–µ?',
               QuestionType.one, answers=['–î–∞', '–ù–µ—Ç'], incor_action=Action.next, cor_answer='–î–∞',
               incorrect_reply='–ù—É –∏ –ª–∞–¥–Ω–æ! –ù–∞—àe –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –≤—Å–µ-—Ä–∞–≤–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è!'),
      Question('–ê —ç—Ç–æ —Ç–æ—á–Ω–æ –ì–µ—Ä–º–∞–Ω –°—Ç–µ–ø–∞–Ω–æ–≤–∏—á? –ß—Ç–æ-—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂.',
               QuestionType.one, answers=['–î–∞', '–ù–µ—Ç'], incor_action=Action.next, cor_answer='–î–∞',
               incorrect_reply='–ù—É –∏ –ª–∞–¥–Ω–æ! –ù–∞—àe –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –≤—Å–µ-—Ä–∞–≤–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è!'),
      Question(
          '–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º #–û—Ç–∫—Ä—ã–≤–∞—Ç—å–ê–ª—Ç–∞–π! –ê —Ç—ã –∑–Ω–∞–µ—à—å –∫–∞–∫ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –¥–æ—Ä–æ–≥–∞ –ø–æ –∫–æ—Ç–æ—Ä–æ–π –º—ã –µ–¥–µ–º? –û–Ω–∞ —Å–æ–µ–¥–∏–Ω—è–µ—Ç –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫ –∏ –ú–æ–Ω–≥–æ–ª–∏—é.',
          QuestionType.one, answers=['–ê–ª—Ç–∞–π—Å–∫–∞—è —Ç—Ä–∞—Å—Å–∞', '–ß—É–π—Å–∏–∫–π —Ç—Ä–∞–∫—Ç', '–°–∏–±–∏—Ä—Å–∫–∏–π —Ç—Ä–∞–∫—Ç'],
          cor_answer='–ß—É–π—Å–∏–∫–π —Ç—Ä–∞–∫—Ç',
          incorrect_reply='–ö–ª–∞—Å—Å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, –Ω–æ –Ω–µ –≤–µ—Ä–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!'),

      Question(
          '–í–µ—Ä–Ω–æ! –≠—Ç–æ –ß—É–π—Å–∫–∏–π —Ç—Ä–∞–∫—Ç! –°–∞–º–∞—è –∫—Ä–∞—Å–∏–≤–∞—è –¥–æ—Ä–æ–≥–∞ –°–∏–±–∏—Ä–∏, –¢–û–ü -10 –¥–æ—Ä–æ–≥ –º–∏—Ä–∞ –ø–æ –≤–µ—Ä—Å–∏–∏ National Geographic, —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–∞—è –∞—Ä—Ç–µ—Ä–∏—è, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –∏–∑–¥—Ä–µ–≤–ª–∏ —Ö–æ–¥–∏–ª–∏ –∫–∞—Ä–∞–≤–∞–Ω—ã —Å —Ç–æ–≤–∞—Ä–∞ –∏–∑ –°–∏–±–∏—Ä–∏ –≤ –ú–æ–Ω–≥–æ–ª–∏—é, –ö–∏—Ç–∞–π, –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω! –ß—Ç–æ–±—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ, –Ω—É–∂–Ω–æ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —Å–ª—É—à–∞—Ç—å —ç–∫—Å–∫—É—Ä—Å–æ–≤–æ–¥–∞. –ì–æ—Ç–æ–≤ –ø–æ–≥—Ä—É–∑–∏—Ç—å—Å—è –≤ –∏—Å—Ç–æ—Ä–∏—é –ß—É–π—Å–∫–æ–≥–æ —Ç—Ä–∞–∫—Ç–∞?',
          QuestionType.one, answers=['–î–∞', '–ù–µ—Ç'], incor_action=Action.next, cor_answer='–î–∞',
          correct_reply='–û—Ç–ª–∏—á–Ω–æ, —Ç–æ–≥–¥–∞ —Å–ª—É—à–∞–π –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∏ –∫–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤, –æ—Ç–≤–µ—Ç—å:',
          incorrect_reply='–ù—É —á—Ç–æ –∂. –Ø —Ç–æ–∂–µ –Ω–µ –≤—Å–µ–≥–¥–∞ —Å–ª—É—à–∞—é —ç–∫—Å–∫—É—Ä—Å–æ–≤–æ–¥–∞. –ü—Ä–∏–¥–µ—Ç—Å—è —Ç–µ–±–µ —É–≥–∞–¥—ã–≤–∞—Ç—å –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø–æ–º–æ—â—å—é –¥—Ä—É–≥–∞.'),
      Question(
          '–ö–∞–∫–∞—è –¥–ª–∏–Ω–∞ —É –ß—É–π—Å–∫–æ–≥–æ —Ç—Ä–∞–∫—Ç–∞?',
          QuestionType.one, answers=['953 –∫–º', '1888 –∫–º', '370 –∫–º'],
          cor_answer='953 –∫–º',
          correct_reply='–í–µ—Ä–Ω–æ! –î–ª–∏–Ω–∞ –ß—É–π—Å–∫–æ–≥–æ —Ç—Ä–∞–∫—Ç–∞ –æ—Ç –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–∞ –¥–æ –≥—Ä–∞–Ω–∏—Ü—ã —Å –ú–æ–Ω–≥–æ–ª–∏–µ–π 953 –∫–º.',
          incorrect_reply='–ö–∞–∂–µ—Ç—Å—è —Ç—ã –Ω–µ–º–Ω–æ–≥–æ –æ—à–∏–±—Å—è, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.'),
      Question(
          '–í—ã —É–∂–µ –¥–æ–±—Ä–∞–ª–∏—Å—å –¥–æ –ë–∏–π—Å–∫–∞?',
          QuestionType.one, answers=['–î–∞', '–ï—â–µ –Ω–µ—Ç'],
          cor_answer='–î–∞',
          sticker='CAACAgIAAxkBAAPiZPw8yOqJhylJAwoJ5Xket9hNGGYAArQsAAKucNBIdMQwb5fhvYQwBA',
          incorrect_reply='–î–∞, —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –ë–∏–π—Å–∫–∞ –Ω–µ –º–∞–ª–µ–Ω—å–∫–æ–µ -  162 –∫–º –æ—Ç –ë–∞—Ä–Ω–∞—É–ª–∞.  –ï—Å–ª–∏ —Ç–µ–±–µ —Å–∫—É—á–Ω–æ, —Å–ø—Ä–æ—Å–∏ —É —ç–∫—Å–∫—É—Ä—Å–æ–≤–æ–¥–∞: –ì–¥–µ –∂–∏–≤–µ—Ç –±–æ–±–µ—Ä?'),

      Question(
          '–û—Ç–ª–∏—á–Ω–æ! –ë–∏–π—Å–∫ - –æ–¥–∏–Ω –∏–∑ –º–æ–∏—Ö –ª—é–±–∏–º—ã—Ö –≥–æ—Ä–æ–¥–æ–≤ –ê–ª—Ç–∞–π—Å–∫–æ–≥–æ –∫—Ä–∞—è! –û–Ω –±—ã–ª –æ–±—Ä–∞–∑–æ–≤–∞–Ω –ø–æ —É–∫–∞–∑—É –ü–µ—Ç—Ä–∞ I, –∑–¥–µ—Å—å –º–Ω–æ–≥–æ —Å—Ç–∞—Ä—ã—Ö –∑–¥–∞–Ω–∏–π, –º–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –ª–µ–≥–µ–Ω–¥ –∏ –∑–∞–≥–∞–¥–æ–∫, –∞ –∑–Ω–∞—á–∏—Ç - –º–Ω–æ–≥–æ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π! –ì–æ—Ç–æ–≤ –ø–æ—Å–µ—Ç–∏—Ç—å –æ–¥–Ω–æ –∏–∑ —Å–∞–º—ã—Ö –∑–∞–≥–∞–¥–æ—á–Ω—ã—Ö –∏ —Å–≤—è—Ç—ã—Ö –º–µ—Å—Ç –ë–∏–π—Å–∫–∞?',
          QuestionType.one, answers=['–ì–æ—Ç–æ–≤', '–ß—Ç–æ-—Ç–æ –º–Ω–µ —Å—Ç—Ä–∞—à–Ω–µ–Ω—å–∫–æ'], incor_action=Action.next,
          cor_answer='–ì–æ—Ç–æ–≤',
          sticker='CAACAgIAAxkBAAIBnWT8UNABp6abpY-8nOxv0nXTllZPAAJJLQACwCjZSJklXdyBsY7eMAQ',
          incorrect_reply='–•–æ-—Ö–æ! –ù–∞—Å—Ç–æ—è—â–∏–µ –∏—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –±–æ—è—Ç—Å—è. –•–æ—Ç—è... –º–Ω–µ —Ç–æ–∂–µ —Å—Ç—Ä–∞—à–Ω–æ, –∫–æ–≥–¥–∞ —è –Ω–µ –∑–Ω–∞—é, –∫—É–¥–∞ –∏–º–µ–Ω–Ω–æ –º—ã –µ–¥–µ–º. –£—Å–∞–∂–∏–≤–∞–π—Å—è –ø–æ—É–¥–æ–±–Ω–µ–π, —Å–µ–π—á–∞—Å —Ä–∞—Å—Å–∫–∞–∂—É.'),
      Question(
          '–°–µ–π—á–∞—Å –º—ã –ø–æ—Å–µ—Ç–∏–º –ë–∏–π—Å–∫–æ–µ –∞—Ä—Ö–∏–µ—Ä–µ–π—Å–∫–æ–µ –ø–æ–¥–≤–æ—Ä—å–µ. –ó–¥–∞–Ω–∏–µ –ø–æ–¥–≤–æ—Ä—å—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–æ –≤ 1880 –≥–æ–¥—É.  –î–∞, –¥–∞, —Ç–æ–≥–¥–∞ –µ—â—ë –Ω–µ —Ä–æ–¥–∏–ª–∞—Å—å –¥–∞–∂–µ —Ç–≤–æ—è –±–∞–±—É—à–∫–∞. –ë—É–¥—å –≤–Ω–∏–º–∞—Ç–µ–ª–µ–Ω –Ω–∞ —ç–∫—Å–∫—É—Ä—Å–∏–∏ –∏–∑–∞–ø–æ–º–∏–Ω–∞–π, –∫–æ–º–Ω–∞—Ç—ã –∫–∞–∫–∏—Ö—Ü–≤–µ—Ç–æ–≤ –µ—Å—Ç—å –≤ –ø–æ–¥–≤–æ—Ä—å–µ. –ü–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –ø–æ—Å–µ—Ç–∏—à—å —ç–∫—Å–∫—É—Ä—Å–∏—é, –≤—ã–±–µ—Ä–∏ —Å—Ç–∏–∫–µ—Ä, —Å —Ç–≤–æ–µ–π —ç–º–æ—Ü–∏–µ–π –æ—Ç —ç—Ç–æ–≥–æ –º–µ—Å—Ç–∞.',
          QuestionType.sticker),
      Question(
          '–ö–ª–∞—Å—Å! –í–∏–∂—É, —á—Ç–æ –ê—Ä—Ö–∏–µ—Ä–µ–π—Å–∫–æ–µ –ø–æ–¥–≤–æ—Ä—å–µ –Ω–µ –æ—Å—Ç–∞–≤–∏–ª–æ —Ç–µ–±—è —Ä–∞–≤–Ω–æ–¥—É—à–Ω—ã–º. –ö–æ–º–Ω–∞—Ç–∞ –∫–∞–∫–æ–≥–æ —Ü–≤–µ—Ç–∞ –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å —Ç–µ–±–µ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ?',
          QuestionType.one, answers=['üî¥ –ö—Ä–∞—Å–Ω—ã–π', 'üü° –ñ–µ–ª—Ç—ã–π', 'üü¢ –ó–µ–ª–µ–Ω—ã–π', 'üîµ –°–∏–Ω–∏–π']),
      ]

questions = {
    Team.marik: [aq[0], aq[1], aq[2:7], aq[7], aq[8], aq[9], aq[10], aq[11], aq[12], aq[13]],
    Team.marea: [aq[0], aq[1], aq[2:7], aq[7], aq[8], aq[9], aq[10], aq[11], aq[12], aq[13]]
}


async def go(message: types.Message, user: User):
    await FSMQuestion.question.set()
    state = Dispatcher.get_current().current_state()

    async with state.proxy() as data:
        data['current'] = questions[user.team][0]
        data['current_num'] = 0
        data['selected_answers'] = []
        data['start'] = datetime.datetime.now()

    await process_question(message, questions[user.team][0])


def select_symbol(a_id, s_answer):
    if a_id in s_answer:
        return "üü¢"
    else:
        return "‚ö™"


async def callback_answer(callback: types.CallbackQuery, callback_data: dict, state: FSMContext):
    await callback.answer()
    answer_id = int(callback_data['answer_id'])

    async with state.proxy() as data:
        question = data['current']
        if answer_id in data['selected_answers']:
            data['selected_answers'].remove(answer_id)
        else:
            data['selected_answers'].append(answer_id)
        s_answer = data['selected_answers']

    answers = question.answers
    buttons = [Button(f"{select_symbol(a.id, s_answer)} {a.answer}",
                      callback_data_answer.new(answer_id=a.id)) for a in answers]
    rows = [2 if (i + 1) * 2 <= len(buttons) else 1 for i in range((len(buttons) + 1) // 2)]
    buttons.append(Button('–û—Ç–≤–µ—Ç–∏—Ç—å', '–û—Ç–≤–µ—Ç'))
    rows.append(1)

    keyboard = create_keyboard_inline(buttons, rows)
    await callback.message.edit_reply_markup(reply_markup=keyboard)


async def callback_send_answers(callback: types.CallbackQuery, session: AsyncSession, user: User, state: FSMContext):
    await callback.answer()
    await callback.message.delete()
    data = await state.get_data()
    question = data['current']
    start = data['start']
    remain = data['remain_questions']
    s_answer = data['selected_answers']

    answers = question.answers
    delta = datetime.datetime.now() - start
    elapsed_time = delta.seconds + (delta.microseconds // 10000) / 100
    score = max(sum([a.score if a.id in s_answer else 0 for a in answers]), 0)

    # await create_or_update_user_answer(session, user.chat_id, question.id, elapsed_time, score)
    await process_remain_question(callback.message, remain, state, session)


async def message_answer(message: types.Message, user: User, state: FSMContext):
    data = await state.get_data()
    question = data['current']
    q_num = data['current_num']
    next = q_num

    if question.type != QuestionType.one:
        await message.delete()
        return

    text = message.text
    if text != question.cor_answer:
        if question.incor_action == Action.next:
            keyboard = ReplyKeyboardRemove()
            next = q_num + 1
        else:
            keyboard = create_keyboard_reply(question.answers, [len(question.answers)])
        if question.sticker is not None:
            await message.answer_sticker(question.sticker)
        await message.answer(question.incorrect_reply, reply_markup=keyboard)
    else:
        if question.correct_reply is not None:
            await message.answer(question.correct_reply)
        if question.sticker is not None:
            await message.answer_sticker(question.sticker)
        next = q_num + 1

    if next >= len(questions[user.team]):
        await state.finish()
        await message.answer("–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å!")
    if q_num != next:
        question = await process_question(message, questions[user.team][q_num + 1])
        await state.update_data(current=question, current_num=q_num + 1)


async def photo_answer(message: types.Message, user: User, state: FSMContext):
    data = await state.get_data()
    question = data['current']
    q_num = data['current_num']
    if question.type != QuestionType.photo:
        await message.delete()
        return

    if q_num + 1 >= len(questions[user.team]):
        await state.finish()
        await message.answer("–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å!")

    question = await process_question(message, questions[user.team][q_num + 1])
    await state.update_data(current=question, current_num=q_num + 1)


async def sticker_answer(message: types.Message, user: User, state: FSMContext):
    data = await state.get_data()
    question = data['current']
    q_num = data['current_num']
    if question.type != QuestionType.sticker:
        await message.delete()
        return

    if q_num + 1 >= len(questions[user.team]):
        await state.finish()
        await message.answer("–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å!")

    question = await process_question(message, questions[user.team][q_num + 1])
    await state.update_data(current=question, current_num=q_num + 1)


def register_stations(dp: Dispatcher):
    dp.register_message_handler(go, text="üöå –ü–æ–µ—Ö–∞–ª–∏", chat_type=types.ChatType.PRIVATE)
    dp.register_callback_query_handler(callback_answer, callback_data_answer.filter(), state=FSMQuestion.question)
    dp.register_callback_query_handler(callback_send_answers, CallbackData('–û—Ç–≤–µ—Ç').filter(),
                                       state=FSMQuestion.question)
    dp.register_message_handler(message_answer, state=FSMQuestion.question)
    dp.register_message_handler(photo_answer, content_types=types.ContentType.PHOTO, state=FSMQuestion.question)
    dp.register_message_handler(sticker_answer, content_types=types.ContentType.STICKER, state=FSMQuestion.question)
